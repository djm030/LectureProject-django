<<<<<<< HEAD
# Generated by Django 4.1.7 on 2023-03-06 09:06
=======
# Generated by Django 4.1.7 on 2023-03-08 07:24
>>>>>>> 1ad6617a6827d82a4d3b81ee39f1aeaccb693b0d

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
<<<<<<< HEAD
                (
                    "memberId",
                    models.PositiveBigIntegerField(
                        blank=True, max_length=200, null=True
                    ),
                ),
                ("userId", models.CharField(blank=True, max_length=20, null=True)),
                ("password", models.CharField(blank=True, max_length=100, null=True)),
                ("nickname", models.CharField(blank=True, max_length=30, null=True)),
                ("name", models.CharField(blank=True, max_length=30, null=True)),
                ("email", models.EmailField(blank=True, max_length=30, null=True)),
=======
                ("memberId", models.AutoField(primary_key=True, serialize=False)),
                (
                    "nickname",
                    models.CharField(blank=True, max_length=30, null=True, unique=True),
                ),
                ("name", models.CharField(blank=True, max_length=30, null=True)),
>>>>>>> 1ad6617a6827d82a4d3b81ee39f1aeaccb693b0d
                ("dateBirth", models.DateField(blank=True, null=True)),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[("male", "Male"), ("female", "Female")],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("phoneNumber", models.CharField(blank=True, max_length=20, null=True)),
                ("profileImg", models.URLField(blank=True, max_length=50, null=True)),
<<<<<<< HEAD
                (
                    "isInstructor",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                ("isAdmin", models.BooleanField(blank=True, default=False, null=True)),
=======
                ("isInstructor", models.BooleanField(default=False)),
                ("first_name", models.CharField(editable=False, max_length=20)),
                ("last_name", models.CharField(editable=False, max_length=20)),
>>>>>>> 1ad6617a6827d82a4d3b81ee39f1aeaccb693b0d
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
